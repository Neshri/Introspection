# executor.py (Pipeline Component)
# This module defines the Executor class responsible for executing plans and generating code changes.

from agent.intelligence.llm import get_executor_response  # Function to generate executor responses using LLM

class Executor:
    """
    The Executor class handles the execution phase of the agent's pipeline.
    It takes a plan and relevant context to generate proposed code changes.
    """

    def __init__(self, main_goal: str, document: str):
        """
        Initializes the Executor with the current goal and document state.

        Args:
            main_goal (str): The programming goal to achieve
            document (str): The current state of the code document
        """
        self.main_goal = main_goal
        self.document = document

    def execute_plan(self, plan: str, backpack: list[dict]) -> str:
        """
        Executes the given plan by calling the LLM executor with all parameters.
        Note: Since plan is new, llm_executor.py will need updating in a subsequent step.

        Args:
            plan (str): The structured plan in JSON format
            backpack (list[dict]): List of relevant files with context

        Returns:
            str: The proposed code change generated by the LLM
        """
        return get_executor_response(self.main_goal, self.document, backpack, plan)